name: OpenNebula CI/CD

# 🔹 This workflow runs on pushes to the `main` branch or version tags (`v*`)
# 🔹 It also runs on pull requests targeting `main`
on:
  push:
    branches: [main]
    tags: ['v*']
  pull_request:
    branches: [main]

# 🔹 Define environment variables used across all steps
env:
  REGISTRY: docker.io  # Docker registry used for pushing images
  IMAGE_NAME: ${{ secrets.DOCKERHUB_USERNAME }}/opennebula-frontend  # Image repo
  HELM_CHART_NAME: opennebula-frontend 
  K8S_NAMESPACE: opennebula

jobs:
  build-test-push-deploy:
    runs-on: ubuntu-latest  # 🔹 Run on the latest Ubuntu virtual machine

    steps:
      # 🛠️ Step 1: Checkout the code from the repository
      - name: Check out code
        uses: actions/checkout@v4

      # 🛠️ Step 2: Set up Docker Buildx for multi-platform builds
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      # 🛠️ Step 3: Log in to Docker Hub (required before pushing images)
      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      # 🏗️ Step 4: Build the Docker image and tag it with both `latest` and the commit SHA
      - name: Build Docker Image
        run: |
          docker build -t ${{ env.IMAGE_NAME }}:latest -t .

      # 🔍 Step 5: Run Trivy security scan BEFORE pushing the image
      # ❗ If CRITICAL or HIGH vulnerabilities are found, the pipeline fails
      - name: Run Trivy Vulnerability Scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ env.IMAGE_NAME }}:latest
          format: 'table'
          exit-code: '1'  # 🔴 Fail pipeline if vulnerabilities are found
          ignore-unfixed: true
          vuln-type: 'os,library'
          severity: 'CRITICAL,HIGH'

      # 🚀 Step 6: Push the Docker images to Docker Hub (only runs if security scan passes)
      - name: Push Docker Images
        run: |
          docker push ${{ env.IMAGE_NAME }}:latest

      # 🧪 Step 7: Run integration tests using the `latest` image
      - name: Run Integration Tests
        run: |
          docker run -d --privileged --name opennebula_test \
            -p 2633:2633 \
            -p 9869:9869 \
            -p 2474:2474 \
            -p 29876:29876 \
            -p 2616:2616 \
            -p 2222:22 \
            ${{ env.IMAGE_NAME }}:latest  # 🔥 Always run tests on the latest image

          # ⏳ Wait for the service to be available (max 30 sec timeout)
          timeout 30 bash -c 'until curl -sf http://localhost:9869; do sleep 2; done'

          # 📜 Print container logs (useful for debugging if the test fails)
          docker logs opennebula_test

          # 🧹 Clean up test container
          docker rm -f opennebula_test

      # ☸️ Step 8: Set up Helm and Kubernetes CLI tools
      - name: Setup Helm and Kubernetes tools
        uses: azure/setup-helm@v3
        with:
          version: 'v3.12.0'
          token: ${{ secrets.GITHUB_TOKEN }}

      # 📦 Step 9: Package the Helm chart for deployment
      - name: Package Helm Chart
        run: |
          helm dependency update helm/  # Update Helm dependencies if any
          helm package helm/ -d ./helm-releases \
            --version 0.1.0 \
            --app-version latest \
            --debug  # 🛠️ Enable debug mode for troubleshooting Helm packaging
